//
// Intervention.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Intervention: Codable, JSONEncodable, Hashable {

    public var inclusionIndicator: String?
    public var synonyms: [String]?
    public var nciThesaurusConceptId: String?
    public var name: String?
    public var description: AnyCodable?
    public var type: String?
    public var category: String?
    public var parents: [String]?

    public init(inclusionIndicator: String? = nil, synonyms: [String]? = nil, nciThesaurusConceptId: String? = nil, name: String? = nil, description: AnyCodable? = nil, type: String? = nil, category: String? = nil, parents: [String]? = nil) {
        self.inclusionIndicator = inclusionIndicator
        self.synonyms = synonyms
        self.nciThesaurusConceptId = nciThesaurusConceptId
        self.name = name
        self.description = description
        self.type = type
        self.category = category
        self.parents = parents
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case inclusionIndicator = "inclusion_indicator"
        case synonyms
        case nciThesaurusConceptId = "nci_thesaurus_concept_id"
        case name
        case description
        case type
        case category
        case parents
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(inclusionIndicator, forKey: .inclusionIndicator)
        try container.encodeIfPresent(synonyms, forKey: .synonyms)
        try container.encodeIfPresent(nciThesaurusConceptId, forKey: .nciThesaurusConceptId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(parents, forKey: .parents)
    }
}

