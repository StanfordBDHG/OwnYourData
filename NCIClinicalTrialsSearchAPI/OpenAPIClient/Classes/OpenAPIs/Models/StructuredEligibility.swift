//
// StructuredEligibility.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct StructuredEligibility: Codable, JSONEncodable, Hashable {

    public var maxAge: String?
    public var maxAgeNumber: Int?
    public var minAgeUnit: String?
    public var maxAgeUnit: String?
    public var maxAgeInYears: Int?
    public var gender: String?
    public var acceptsHealthyVolunteers: Bool?
    public var minAge: String?
    public var minAgeNumber: Int?
    public var minAgeInYears: Int?

    public init(maxAge: String? = nil, maxAgeNumber: Int? = nil, minAgeUnit: String? = nil, maxAgeUnit: String? = nil, maxAgeInYears: Int? = nil, gender: String? = nil, acceptsHealthyVolunteers: Bool? = nil, minAge: String? = nil, minAgeNumber: Int? = nil, minAgeInYears: Int? = nil) {
        self.maxAge = maxAge
        self.maxAgeNumber = maxAgeNumber
        self.minAgeUnit = minAgeUnit
        self.maxAgeUnit = maxAgeUnit
        self.maxAgeInYears = maxAgeInYears
        self.gender = gender
        self.acceptsHealthyVolunteers = acceptsHealthyVolunteers
        self.minAge = minAge
        self.minAgeNumber = minAgeNumber
        self.minAgeInYears = minAgeInYears
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case maxAge = "max_age"
        case maxAgeNumber = "max_age_number"
        case minAgeUnit = "min_age_unit"
        case maxAgeUnit = "max_age_unit"
        case maxAgeInYears = "max_age_in_years"
        case gender
        case acceptsHealthyVolunteers = "accepts_healthy_volunteers"
        case minAge = "min_age"
        case minAgeNumber = "min_age_number"
        case minAgeInYears = "min_age_in_years"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(maxAge, forKey: .maxAge)
        try container.encodeIfPresent(maxAgeNumber, forKey: .maxAgeNumber)
        try container.encodeIfPresent(minAgeUnit, forKey: .minAgeUnit)
        try container.encodeIfPresent(maxAgeUnit, forKey: .maxAgeUnit)
        try container.encodeIfPresent(maxAgeInYears, forKey: .maxAgeInYears)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(acceptsHealthyVolunteers, forKey: .acceptsHealthyVolunteers)
        try container.encodeIfPresent(minAge, forKey: .minAge)
        try container.encodeIfPresent(minAgeNumber, forKey: .minAgeNumber)
        try container.encodeIfPresent(minAgeInYears, forKey: .minAgeInYears)
    }
}

