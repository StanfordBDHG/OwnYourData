//
// Site.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Site: Codable, JSONEncodable, Hashable {

    public var orgStateOrProvince: String?
    public var contactName: String?
    public var contactPhone: String?
    public var recruitmentStatusDate: Date?
    public var orgAddressLine2: AnyCodable?
    public var orgVa: Bool?
    public var orgAddressLine1: String?
    public var orgTty: AnyCodable?
    public var orgFamily: AnyCodable?
    public var orgPostalCode: String?
    public var contactEmail: String?
    public var recruitmentStatus: String?
    public var orgCity: String?
    public var orgEmail: AnyCodable?
    public var orgCountry: String?
    public var orgFax: String?
    public var orgPhone: String?
    public var orgName: String?
    public var orgCoordinates: Coordinates?

    public init(orgStateOrProvince: String? = nil, contactName: String? = nil, contactPhone: String? = nil, recruitmentStatusDate: Date? = nil, orgAddressLine2: AnyCodable? = nil, orgVa: Bool? = nil, orgAddressLine1: String? = nil, orgTty: AnyCodable? = nil, orgFamily: AnyCodable? = nil, orgPostalCode: String? = nil, contactEmail: String? = nil, recruitmentStatus: String? = nil, orgCity: String? = nil, orgEmail: AnyCodable? = nil, orgCountry: String? = nil, orgFax: String? = nil, orgPhone: String? = nil, orgName: String? = nil, orgCoordinates: Coordinates? = nil) {
        self.orgStateOrProvince = orgStateOrProvince
        self.contactName = contactName
        self.contactPhone = contactPhone
        self.recruitmentStatusDate = recruitmentStatusDate
        self.orgAddressLine2 = orgAddressLine2
        self.orgVa = orgVa
        self.orgAddressLine1 = orgAddressLine1
        self.orgTty = orgTty
        self.orgFamily = orgFamily
        self.orgPostalCode = orgPostalCode
        self.contactEmail = contactEmail
        self.recruitmentStatus = recruitmentStatus
        self.orgCity = orgCity
        self.orgEmail = orgEmail
        self.orgCountry = orgCountry
        self.orgFax = orgFax
        self.orgPhone = orgPhone
        self.orgName = orgName
        self.orgCoordinates = orgCoordinates
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case orgStateOrProvince = "org_state_or_province"
        case contactName = "contact_name"
        case contactPhone = "contact_phone"
        case recruitmentStatusDate = "recruitment_status_date"
        case orgAddressLine2 = "org_address_line_2"
        case orgVa = "org_va"
        case orgAddressLine1 = "org_address_line_1"
        case orgTty = "org_tty"
        case orgFamily = "org_family"
        case orgPostalCode = "org_postal_code"
        case contactEmail = "contact_email"
        case recruitmentStatus = "recruitment_status"
        case orgCity = "org_city"
        case orgEmail = "org_email"
        case orgCountry = "org_country"
        case orgFax = "org_fax"
        case orgPhone = "org_phone"
        case orgName = "org_name"
        case orgCoordinates = "org_coordinates"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(orgStateOrProvince, forKey: .orgStateOrProvince)
        try container.encodeIfPresent(contactName, forKey: .contactName)
        try container.encodeIfPresent(contactPhone, forKey: .contactPhone)
        try container.encodeIfPresent(recruitmentStatusDate, forKey: .recruitmentStatusDate)
        try container.encodeIfPresent(orgAddressLine2, forKey: .orgAddressLine2)
        try container.encodeIfPresent(orgVa, forKey: .orgVa)
        try container.encodeIfPresent(orgAddressLine1, forKey: .orgAddressLine1)
        try container.encodeIfPresent(orgTty, forKey: .orgTty)
        try container.encodeIfPresent(orgFamily, forKey: .orgFamily)
        try container.encodeIfPresent(orgPostalCode, forKey: .orgPostalCode)
        try container.encodeIfPresent(contactEmail, forKey: .contactEmail)
        try container.encodeIfPresent(recruitmentStatus, forKey: .recruitmentStatus)
        try container.encodeIfPresent(orgCity, forKey: .orgCity)
        try container.encodeIfPresent(orgEmail, forKey: .orgEmail)
        try container.encodeIfPresent(orgCountry, forKey: .orgCountry)
        try container.encodeIfPresent(orgFax, forKey: .orgFax)
        try container.encodeIfPresent(orgPhone, forKey: .orgPhone)
        try container.encodeIfPresent(orgName, forKey: .orgName)
        try container.encodeIfPresent(orgCoordinates, forKey: .orgCoordinates)
    }
}

