//
// TrialDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TrialDetail: Codable, JSONEncodable, Hashable {

    public var otherIds: [Identifier]?
    public var amendmentDate: Date?
    public var keywords: AnyCodable?
    public var dcpId: AnyCodable?
    public var interventionalModel: String?
    public var leadOrg: String?
    public var eligibility: Eligibility?
    public var sites: [Site]?
    public var completionDateTypeCode: String?
    public var detailDescription: String?
    public var officialTitle: String?
    public var phaseSortOrder: Int?
    public var collaborators: [Collaborators]?
    public var associatedStudies: [AssociatedStudy]?
    public var outcomeMeasures: [OutcomeMeasure]?
    public var phase: String?
    public var centralContact: CentralContact?
    public var primaryPurpose: String?
    public var numberOfArms: Int?
    public var studyProtocolTypeSortOrder: Int?
    public var nctId: String?
    public var biomarkers: [Biomarker]?
    public var classificationCode: AnyCodable?
    public var currentTrialStatusDate: Date?
    public var diseases: [Disease]?
    public var primaryPurposeSortOrder: Int?
    public var protocolId: String?
    public var activeSitesCount: Int?
    public var leadOrgCancerCenter: AnyCodable?
    public var arms: [Arm]?
    public var studyModelCode: AnyCodable?
    public var nciId: String?
    public var whyStudyStopped: AnyCodable?
    public var briefSummary: String?
    public var briefTitle: String?
    public var statusHistory: [StatusHistory]?
    public var studyPopulationDescription: AnyCodable?
    public var samplingMethodCode: AnyCodable?
    public var minimumTargetAccrualNumber: Int?
    public var priorTherapy: [PriorTherapy]?
    public var currentTrialStatusSortOrder: Int?
    public var startDate: Date?
    public var recordVerificationDate: Date?
    public var ctepId: String?
    public var currentTrialStatus: String?
    public var studyModelOtherText: AnyCodable?
    public var masking: Masking?
    public var acronym: AnyCodable?
    public var nciPrograms: [String]?
    public var nciFunded: String?
    public var anatomicSites: [String]?
    public var ccrId: AnyCodable?
    public var startDateTypeCode: String?
    public var principalInvestigator: String?
    public var studySource: String?
    public var completionDate: Date?
    public var studySubtypeCode: AnyCodable?
    public var studyProtocolType: String?

    public init(otherIds: [Identifier]? = nil, amendmentDate: Date? = nil, keywords: AnyCodable? = nil, dcpId: AnyCodable? = nil, interventionalModel: String? = nil, leadOrg: String? = nil, eligibility: Eligibility? = nil, sites: [Site]? = nil, completionDateTypeCode: String? = nil, detailDescription: String? = nil, officialTitle: String? = nil, phaseSortOrder: Int? = nil, collaborators: [Collaborators]? = nil, associatedStudies: [AssociatedStudy]? = nil, outcomeMeasures: [OutcomeMeasure]? = nil, phase: String? = nil, centralContact: CentralContact? = nil, primaryPurpose: String? = nil, numberOfArms: Int? = nil, studyProtocolTypeSortOrder: Int? = nil, nctId: String? = nil, biomarkers: [Biomarker]? = nil, classificationCode: AnyCodable? = nil, currentTrialStatusDate: Date? = nil, diseases: [Disease]? = nil, primaryPurposeSortOrder: Int? = nil, protocolId: String? = nil, activeSitesCount: Int? = nil, leadOrgCancerCenter: AnyCodable? = nil, arms: [Arm]? = nil, studyModelCode: AnyCodable? = nil, nciId: String? = nil, whyStudyStopped: AnyCodable? = nil, briefSummary: String? = nil, briefTitle: String? = nil, statusHistory: [StatusHistory]? = nil, studyPopulationDescription: AnyCodable? = nil, samplingMethodCode: AnyCodable? = nil, minimumTargetAccrualNumber: Int? = nil, priorTherapy: [PriorTherapy]? = nil, currentTrialStatusSortOrder: Int? = nil, startDate: Date? = nil, recordVerificationDate: Date? = nil, ctepId: String? = nil, currentTrialStatus: String? = nil, studyModelOtherText: AnyCodable? = nil, masking: Masking? = nil, acronym: AnyCodable? = nil, nciPrograms: [String]? = nil, nciFunded: String? = nil, anatomicSites: [String]? = nil, ccrId: AnyCodable? = nil, startDateTypeCode: String? = nil, principalInvestigator: String? = nil, studySource: String? = nil, completionDate: Date? = nil, studySubtypeCode: AnyCodable? = nil, studyProtocolType: String? = nil) {
        self.otherIds = otherIds
        self.amendmentDate = amendmentDate
        self.keywords = keywords
        self.dcpId = dcpId
        self.interventionalModel = interventionalModel
        self.leadOrg = leadOrg
        self.eligibility = eligibility
        self.sites = sites
        self.completionDateTypeCode = completionDateTypeCode
        self.detailDescription = detailDescription
        self.officialTitle = officialTitle
        self.phaseSortOrder = phaseSortOrder
        self.collaborators = collaborators
        self.associatedStudies = associatedStudies
        self.outcomeMeasures = outcomeMeasures
        self.phase = phase
        self.centralContact = centralContact
        self.primaryPurpose = primaryPurpose
        self.numberOfArms = numberOfArms
        self.studyProtocolTypeSortOrder = studyProtocolTypeSortOrder
        self.nctId = nctId
        self.biomarkers = biomarkers
        self.classificationCode = classificationCode
        self.currentTrialStatusDate = currentTrialStatusDate
        self.diseases = diseases
        self.primaryPurposeSortOrder = primaryPurposeSortOrder
        self.protocolId = protocolId
        self.activeSitesCount = activeSitesCount
        self.leadOrgCancerCenter = leadOrgCancerCenter
        self.arms = arms
        self.studyModelCode = studyModelCode
        self.nciId = nciId
        self.whyStudyStopped = whyStudyStopped
        self.briefSummary = briefSummary
        self.briefTitle = briefTitle
        self.statusHistory = statusHistory
        self.studyPopulationDescription = studyPopulationDescription
        self.samplingMethodCode = samplingMethodCode
        self.minimumTargetAccrualNumber = minimumTargetAccrualNumber
        self.priorTherapy = priorTherapy
        self.currentTrialStatusSortOrder = currentTrialStatusSortOrder
        self.startDate = startDate
        self.recordVerificationDate = recordVerificationDate
        self.ctepId = ctepId
        self.currentTrialStatus = currentTrialStatus
        self.studyModelOtherText = studyModelOtherText
        self.masking = masking
        self.acronym = acronym
        self.nciPrograms = nciPrograms
        self.nciFunded = nciFunded
        self.anatomicSites = anatomicSites
        self.ccrId = ccrId
        self.startDateTypeCode = startDateTypeCode
        self.principalInvestigator = principalInvestigator
        self.studySource = studySource
        self.completionDate = completionDate
        self.studySubtypeCode = studySubtypeCode
        self.studyProtocolType = studyProtocolType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case otherIds = "other_ids"
        case amendmentDate = "amendment_date"
        case keywords
        case dcpId = "dcp_id"
        case interventionalModel = "interventional_model"
        case leadOrg = "lead_org"
        case eligibility
        case sites
        case completionDateTypeCode = "completion_date_type_code"
        case detailDescription = "detail_description"
        case officialTitle = "official_title"
        case phaseSortOrder = "_phase_sort_order"
        case collaborators
        case associatedStudies = "associated_studies"
        case outcomeMeasures = "outcome_measures"
        case phase
        case centralContact = "central_contact"
        case primaryPurpose = "primary_purpose"
        case numberOfArms = "number_of_arms"
        case studyProtocolTypeSortOrder = "_study_protocol_type_sort_order"
        case nctId = "nct_id"
        case biomarkers
        case classificationCode = "classification_code"
        case currentTrialStatusDate = "current_trial_status_date"
        case diseases
        case primaryPurposeSortOrder = "_primary_purpose_sort_order"
        case protocolId = "protocol_id"
        case activeSitesCount = "active_sites_count"
        case leadOrgCancerCenter = "lead_org_cancer_center"
        case arms
        case studyModelCode = "study_model_code"
        case nciId = "nci_id"
        case whyStudyStopped = "why_study_stopped"
        case briefSummary = "brief_summary"
        case briefTitle = "brief_title"
        case statusHistory = "status_history"
        case studyPopulationDescription = "study_population_description"
        case samplingMethodCode = "sampling_method_code"
        case minimumTargetAccrualNumber = "minimum_target_accrual_number"
        case priorTherapy = "prior_therapy"
        case currentTrialStatusSortOrder = "_current_trial_status_sort_order"
        case startDate = "start_date"
        case recordVerificationDate = "record_verification_date"
        case ctepId = "ctep_id"
        case currentTrialStatus = "current_trial_status"
        case studyModelOtherText = "study_model_other_text"
        case masking
        case acronym
        case nciPrograms = "nci_programs"
        case nciFunded = "nci_funded"
        case anatomicSites = "anatomic_sites"
        case ccrId = "ccr_id"
        case startDateTypeCode = "start_date_type_code"
        case principalInvestigator = "principal_investigator"
        case studySource = "study_source"
        case completionDate = "completion_date"
        case studySubtypeCode = "study_subtype_code"
        case studyProtocolType = "study_protocol_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(otherIds, forKey: .otherIds)
        try container.encodeIfPresent(amendmentDate, forKey: .amendmentDate)
        try container.encodeIfPresent(keywords, forKey: .keywords)
        try container.encodeIfPresent(dcpId, forKey: .dcpId)
        try container.encodeIfPresent(interventionalModel, forKey: .interventionalModel)
        try container.encodeIfPresent(leadOrg, forKey: .leadOrg)
        try container.encodeIfPresent(eligibility, forKey: .eligibility)
        try container.encodeIfPresent(sites, forKey: .sites)
        try container.encodeIfPresent(completionDateTypeCode, forKey: .completionDateTypeCode)
        try container.encodeIfPresent(detailDescription, forKey: .detailDescription)
        try container.encodeIfPresent(officialTitle, forKey: .officialTitle)
        try container.encodeIfPresent(phaseSortOrder, forKey: .phaseSortOrder)
        try container.encodeIfPresent(collaborators, forKey: .collaborators)
        try container.encodeIfPresent(associatedStudies, forKey: .associatedStudies)
        try container.encodeIfPresent(outcomeMeasures, forKey: .outcomeMeasures)
        try container.encodeIfPresent(phase, forKey: .phase)
        try container.encodeIfPresent(centralContact, forKey: .centralContact)
        try container.encodeIfPresent(primaryPurpose, forKey: .primaryPurpose)
        try container.encodeIfPresent(numberOfArms, forKey: .numberOfArms)
        try container.encodeIfPresent(studyProtocolTypeSortOrder, forKey: .studyProtocolTypeSortOrder)
        try container.encodeIfPresent(nctId, forKey: .nctId)
        try container.encodeIfPresent(biomarkers, forKey: .biomarkers)
        try container.encodeIfPresent(classificationCode, forKey: .classificationCode)
        try container.encodeIfPresent(currentTrialStatusDate, forKey: .currentTrialStatusDate)
        try container.encodeIfPresent(diseases, forKey: .diseases)
        try container.encodeIfPresent(primaryPurposeSortOrder, forKey: .primaryPurposeSortOrder)
        try container.encodeIfPresent(protocolId, forKey: .protocolId)
        try container.encodeIfPresent(activeSitesCount, forKey: .activeSitesCount)
        try container.encodeIfPresent(leadOrgCancerCenter, forKey: .leadOrgCancerCenter)
        try container.encodeIfPresent(arms, forKey: .arms)
        try container.encodeIfPresent(studyModelCode, forKey: .studyModelCode)
        try container.encodeIfPresent(nciId, forKey: .nciId)
        try container.encodeIfPresent(whyStudyStopped, forKey: .whyStudyStopped)
        try container.encodeIfPresent(briefSummary, forKey: .briefSummary)
        try container.encodeIfPresent(briefTitle, forKey: .briefTitle)
        try container.encodeIfPresent(statusHistory, forKey: .statusHistory)
        try container.encodeIfPresent(studyPopulationDescription, forKey: .studyPopulationDescription)
        try container.encodeIfPresent(samplingMethodCode, forKey: .samplingMethodCode)
        try container.encodeIfPresent(minimumTargetAccrualNumber, forKey: .minimumTargetAccrualNumber)
        try container.encodeIfPresent(priorTherapy, forKey: .priorTherapy)
        try container.encodeIfPresent(currentTrialStatusSortOrder, forKey: .currentTrialStatusSortOrder)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(recordVerificationDate, forKey: .recordVerificationDate)
        try container.encodeIfPresent(ctepId, forKey: .ctepId)
        try container.encodeIfPresent(currentTrialStatus, forKey: .currentTrialStatus)
        try container.encodeIfPresent(studyModelOtherText, forKey: .studyModelOtherText)
        try container.encodeIfPresent(masking, forKey: .masking)
        try container.encodeIfPresent(acronym, forKey: .acronym)
        try container.encodeIfPresent(nciPrograms, forKey: .nciPrograms)
        try container.encodeIfPresent(nciFunded, forKey: .nciFunded)
        try container.encodeIfPresent(anatomicSites, forKey: .anatomicSites)
        try container.encodeIfPresent(ccrId, forKey: .ccrId)
        try container.encodeIfPresent(startDateTypeCode, forKey: .startDateTypeCode)
        try container.encodeIfPresent(principalInvestigator, forKey: .principalInvestigator)
        try container.encodeIfPresent(studySource, forKey: .studySource)
        try container.encodeIfPresent(completionDate, forKey: .completionDate)
        try container.encodeIfPresent(studySubtypeCode, forKey: .studySubtypeCode)
        try container.encodeIfPresent(studyProtocolType, forKey: .studyProtocolType)
    }
}

