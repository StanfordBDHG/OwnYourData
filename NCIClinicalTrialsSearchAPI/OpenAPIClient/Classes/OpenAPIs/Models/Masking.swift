//
// Masking.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Masking: Codable, JSONEncodable, Hashable {

    public var roleCaregiver: AnyCodable?
    public var masking: AnyCodable?
    public var roleInvestigator: AnyCodable?
    public var roleOutcomeAssessor: AnyCodable?
    public var roleSubject: AnyCodable?
    public var allocationCode: String?

    public init(roleCaregiver: AnyCodable? = nil, masking: AnyCodable? = nil, roleInvestigator: AnyCodable? = nil, roleOutcomeAssessor: AnyCodable? = nil, roleSubject: AnyCodable? = nil, allocationCode: String? = nil) {
        self.roleCaregiver = roleCaregiver
        self.masking = masking
        self.roleInvestigator = roleInvestigator
        self.roleOutcomeAssessor = roleOutcomeAssessor
        self.roleSubject = roleSubject
        self.allocationCode = allocationCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case roleCaregiver = "role_caregiver"
        case masking
        case roleInvestigator = "role_investigator"
        case roleOutcomeAssessor = "role_outcome_assessor"
        case roleSubject = "role_subject"
        case allocationCode = "allocation_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(roleCaregiver, forKey: .roleCaregiver)
        try container.encodeIfPresent(masking, forKey: .masking)
        try container.encodeIfPresent(roleInvestigator, forKey: .roleInvestigator)
        try container.encodeIfPresent(roleOutcomeAssessor, forKey: .roleOutcomeAssessor)
        try container.encodeIfPresent(roleSubject, forKey: .roleSubject)
        try container.encodeIfPresent(allocationCode, forKey: .allocationCode)
    }
}

